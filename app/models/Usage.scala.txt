import org.joda.time.DateTime

val custID = "70"
val xmlBaseDir = "/app/anvil/savemoney/public/"
val fileName = custID + ".XML"
val xmlFile = xmlBaseDir + fileName

val intervalData = scala.xml.XML.loadFile(xmlFile) \\ "IntervalBlock"

val data = intervalData.view.map(_ \\ "value").map(_.map(_.text.toInt)).toList

val t = intervalData.view.map(_ \\ "start").map(_.map(_.text.toInt)).toList

val dates = t.map (x => new DateTime(x.head.toLong * 1000))
val month = dates.map (x => x.getMonthOfYear)
val monthid = dates.map (x => x.getMonthOfYear + (x.getYear * 100) )
val season = month.map (x => x match {
    case x if 5 to 10 contains x => 0
    case _ => 1
  }
)



val usageByDay = data.map(_.sum)

val avgUsagePerDay = usageByDay.sum / usageByDay.length

val hours = List(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)
val hoursOffPeak = List(5,6,7,8,9,10,11,18,19,20,21,22,23)
val hoursOnPeak = List(12,13,14,16,17)
val hoursSuperOffPeak = List(0,1,2,3,4)


val usageByHour = hours.map(num => data.map(_(num)))

val avgUsageByHour = usageByHour.map( usage => usage.sum / usage.length )



val avgUsageOffPeak = hoursOffPeak.map(num => avgUsageByHour(num))
val avgUsageOnPeak = hoursOnPeak.map(num => avgUsageByHour(num))
val avgUsageSuperOffPeak = hoursSuperOffPeak.map(num => avgUsageByHour(num))



val baselineCoastal = (294,498)
val baselineInland = (330,549)
val baselineMountain = (519,855)
val baselineDesert = (585,660)



/* prices in cents per kWh */

val pricesByTierSummer = List(15,17,35,37)
val pricesByTierWinter = List(15,17,33,35)
val tierThresholdsPct = List(0,100,130,200)




val months = monthid.distinct

def getIndexForMonthID(monthID:Int) = {
    monthid.zipWithIndex.filter(_._1 == monthID).map(_._2)
}



/* experimental */

months.map(monthid => calculateMonthlyBill(monthid))



def calculateMonthlyBill (monthID:Int) = {

}


def calculateMonthlyBillEvTOU2 (monthID: Int) = {

  val monthIDs = getIndexForMonthID(monthID)

  val priceOffPeak = 19
  val priceOnPeak = 29
  val priceSuperOffPeak = 16

  monthIDs.map(id => 
    data
  )
}